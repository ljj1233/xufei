def extract_speech_features(file_path: str) -> Dict[str, Any]:
    """提取语音特征
    
    从音频文件中提取语音特征，使用讯飞API进行语音评测
    
    Args:
        file_path: 文件路径
        
    Returns:
        Dict[str, Any]: 语音特征
    """
    start_time = time.time()
    logger.info(f"开始提取语音特征: {file_path}")
    
    try:
        # 检查文件大小
        file_size = os.path.getsize(file_path)
        logger.info(f"音频文件大小: {file_size / (1024 * 1024):.2f} MB")
        
        if file_size > 100 * 1024 * 1024:  # 100MB
            logger.warning(f"文件过大: {file_size / (1024 * 1024):.2f} MB，可能会影响处理性能")
        
        # 读取音频文件
        try:
            with open(file_path, 'rb') as f:
                audio_data = f.read()
            logger.info(f"成功读取音频文件: {len(audio_data)} 字节")
        except Exception as e:
            logger.error(f"读取音频文件失败: {str(e)}")
            raise IOError(f"无法读取音频文件: {str(e)}")
        
        features = {}
        
        # 调用讯飞语音评测服务
        try:
            logger.info("调用讯飞语音评测服务")
            xunfei_assessment = xunfei_service.speech_assessment(audio_data)
            features["xunfei_assessment"] = xunfei_assessment
            logger.info(f"讯飞语音评测完成: {xunfei_assessment}")
        except Exception as e:
            logger.error(f"讯飞语音评测失败: {str(e)}")
            features["xunfei_assessment"] = {}
        
        # 调用讯飞情感分析服务
        try:
            logger.info("调用讯飞情感分析服务")
            xunfei_emotion = xunfei_service.emotion_analysis(audio_data)
            features["xunfei_emotion"] = xunfei_emotion
            logger.info(f"讯飞情感分析完成: {xunfei_emotion}")
        except Exception as e:
            logger.error(f"讯飞情感分析失败: {str(e)}")
            features["xunfei_emotion"] = {}
        
        # 同时保留一些基本的音频特征分析作为补充
        try:
            logger.info("提取基本音频特征")
            y, sr = librosa.load(file_path, sr=None)
            
            # 提取基本特征
            features.update({
                "mfcc": librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13).mean(axis=1),
                "spectral_centroid": librosa.feature.spectral_centroid(y=y, sr=sr).mean(),
                "zero_crossing_rate": librosa.feature.zero_crossing_rate(y).mean(),
                "tempo": librosa.beat.tempo(y=y, sr=sr)[0],
                "rms": librosa.feature.rms(y=y).mean(),
            })
            logger.info(f"基本音频特征提取完成: 采样率={sr}, 时长={len(y)/sr:.2f}秒")
        except Exception as e:
            logger.error(f"基本音频特征提取失败: {str(e)}")
            # 提供默认值
            features.update({
                "mfcc": np.zeros(13),
                "spectral_centroid": 0.0,
                "zero_crossing_rate": 0.1,
                "tempo": 120.0,
                "rms": 0.1,
            })
        
        elapsed_time = time.time() - start_time
        logger.info(f"语音特征提取完成，耗时: {elapsed_time:.2f}秒")
        return features
    
    except Exception as e:
        elapsed_time = time.time() - start_time
        error_msg = f"提取语音特征失败，耗时: {elapsed_time:.2f}秒, 错误: {str(e)}"
        logger.error(f"{error_msg}\n{traceback.format_exc()}")
        # 返回空特征而不是抛出异常，让分析过程可以继续
        return {}